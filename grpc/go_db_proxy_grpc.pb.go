// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoDbProxyClient is the client API for GoDbProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoDbProxyClient interface {
	Query(ctx context.Context, in *JStatementRequest, opts ...grpc.CallOption) (*QueryReply, error)
	Execute(ctx context.Context, in *JStatementRequest, opts ...grpc.CallOption) (*JStatementReply, error)
	ExecBatch(ctx context.Context, in *JStatementBatchRequest, opts ...grpc.CallOption) (*JStatementBatchReply, error)
	BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*BeginTransactionReply, error)
	EndTransaction(ctx context.Context, in *EndTransactionRequest, opts ...grpc.CallOption) (*EndTransactionReply, error)
}

type goDbProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewGoDbProxyClient(cc grpc.ClientConnInterface) GoDbProxyClient {
	return &goDbProxyClient{cc}
}

func (c *goDbProxyClient) Query(ctx context.Context, in *JStatementRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, "/oracle.GoDbProxy/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goDbProxyClient) Execute(ctx context.Context, in *JStatementRequest, opts ...grpc.CallOption) (*JStatementReply, error) {
	out := new(JStatementReply)
	err := c.cc.Invoke(ctx, "/oracle.GoDbProxy/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goDbProxyClient) ExecBatch(ctx context.Context, in *JStatementBatchRequest, opts ...grpc.CallOption) (*JStatementBatchReply, error) {
	out := new(JStatementBatchReply)
	err := c.cc.Invoke(ctx, "/oracle.GoDbProxy/ExecBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goDbProxyClient) BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*BeginTransactionReply, error) {
	out := new(BeginTransactionReply)
	err := c.cc.Invoke(ctx, "/oracle.GoDbProxy/BeginTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goDbProxyClient) EndTransaction(ctx context.Context, in *EndTransactionRequest, opts ...grpc.CallOption) (*EndTransactionReply, error) {
	out := new(EndTransactionReply)
	err := c.cc.Invoke(ctx, "/oracle.GoDbProxy/EndTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoDbProxyServer is the server API for GoDbProxy service.
// All implementations must embed UnimplementedGoDbProxyServer
// for forward compatibility
type GoDbProxyServer interface {
	Query(context.Context, *JStatementRequest) (*QueryReply, error)
	Execute(context.Context, *JStatementRequest) (*JStatementReply, error)
	ExecBatch(context.Context, *JStatementBatchRequest) (*JStatementBatchReply, error)
	BeginTransaction(context.Context, *BeginTransactionRequest) (*BeginTransactionReply, error)
	EndTransaction(context.Context, *EndTransactionRequest) (*EndTransactionReply, error)
	mustEmbedUnimplementedGoDbProxyServer()
}

// UnimplementedGoDbProxyServer must be embedded to have forward compatible implementations.
type UnimplementedGoDbProxyServer struct {
}

func (UnimplementedGoDbProxyServer) Query(context.Context, *JStatementRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedGoDbProxyServer) Execute(context.Context, *JStatementRequest) (*JStatementReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedGoDbProxyServer) ExecBatch(context.Context, *JStatementBatchRequest) (*JStatementBatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecBatch not implemented")
}
func (UnimplementedGoDbProxyServer) BeginTransaction(context.Context, *BeginTransactionRequest) (*BeginTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransaction not implemented")
}
func (UnimplementedGoDbProxyServer) EndTransaction(context.Context, *EndTransactionRequest) (*EndTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTransaction not implemented")
}
func (UnimplementedGoDbProxyServer) mustEmbedUnimplementedGoDbProxyServer() {}

// UnsafeGoDbProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoDbProxyServer will
// result in compilation errors.
type UnsafeGoDbProxyServer interface {
	mustEmbedUnimplementedGoDbProxyServer()
}

func RegisterGoDbProxyServer(s grpc.ServiceRegistrar, srv GoDbProxyServer) {
	s.RegisterService(&GoDbProxy_ServiceDesc, srv)
}

func _GoDbProxy_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoDbProxyServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.GoDbProxy/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoDbProxyServer).Query(ctx, req.(*JStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoDbProxy_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoDbProxyServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.GoDbProxy/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoDbProxyServer).Execute(ctx, req.(*JStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoDbProxy_ExecBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JStatementBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoDbProxyServer).ExecBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.GoDbProxy/ExecBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoDbProxyServer).ExecBatch(ctx, req.(*JStatementBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoDbProxy_BeginTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoDbProxyServer).BeginTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.GoDbProxy/BeginTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoDbProxyServer).BeginTransaction(ctx, req.(*BeginTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoDbProxy_EndTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoDbProxyServer).EndTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.GoDbProxy/EndTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoDbProxyServer).EndTransaction(ctx, req.(*EndTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoDbProxy_ServiceDesc is the grpc.ServiceDesc for GoDbProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoDbProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oracle.GoDbProxy",
	HandlerType: (*GoDbProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _GoDbProxy_Query_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _GoDbProxy_Execute_Handler,
		},
		{
			MethodName: "ExecBatch",
			Handler:    _GoDbProxy_ExecBatch_Handler,
		},
		{
			MethodName: "BeginTransaction",
			Handler:    _GoDbProxy_BeginTransaction_Handler,
		},
		{
			MethodName: "EndTransaction",
			Handler:    _GoDbProxy_EndTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_db_proxy.proto",
}
