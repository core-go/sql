// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: go_db_proxy.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DbProxyClient is the client API for DbProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DbProxyClient interface {
	Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*QueryResponse, error)
	QueryOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*QueryResponse, error)
	Execute(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ExecBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*Response, error)
	BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*BeginTransactionResponse, error)
	EndTransaction(ctx context.Context, in *EndTransactionRequest, opts ...grpc.CallOption) (*QueryResponse, error)
}

type dbProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewDbProxyClient(cc grpc.ClientConnInterface) DbProxyClient {
	return &dbProxyClient{cc}
}

func (c *dbProxyClient) Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/query.DbProxy/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbProxyClient) QueryOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/query.DbProxy/QueryOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbProxyClient) Execute(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/query.DbProxy/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbProxyClient) ExecBatch(ctx context.Context, in *BatchRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/query.DbProxy/ExecBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbProxyClient) BeginTransaction(ctx context.Context, in *BeginTransactionRequest, opts ...grpc.CallOption) (*BeginTransactionResponse, error) {
	out := new(BeginTransactionResponse)
	err := c.cc.Invoke(ctx, "/query.DbProxy/BeginTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbProxyClient) EndTransaction(ctx context.Context, in *EndTransactionRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/query.DbProxy/EndTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DbProxyServer is the server API for DbProxy service.
// All implementations must embed UnimplementedDbProxyServer
// for forward compatibility
type DbProxyServer interface {
	Query(context.Context, *Request) (*QueryResponse, error)
	QueryOne(context.Context, *Request) (*QueryResponse, error)
	Execute(context.Context, *Request) (*Response, error)
	ExecBatch(context.Context, *BatchRequest) (*Response, error)
	BeginTransaction(context.Context, *BeginTransactionRequest) (*BeginTransactionResponse, error)
	EndTransaction(context.Context, *EndTransactionRequest) (*QueryResponse, error)
	mustEmbedUnimplementedDbProxyServer()
}

// UnimplementedDbProxyServer must be embedded to have forward compatible implementations.
type UnimplementedDbProxyServer struct {
}

func (UnimplementedDbProxyServer) Query(context.Context, *Request) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDbProxyServer) QueryOne(context.Context, *Request) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOne not implemented")
}
func (UnimplementedDbProxyServer) Execute(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedDbProxyServer) ExecBatch(context.Context, *BatchRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecBatch not implemented")
}
func (UnimplementedDbProxyServer) BeginTransaction(context.Context, *BeginTransactionRequest) (*BeginTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransaction not implemented")
}
func (UnimplementedDbProxyServer) EndTransaction(context.Context, *EndTransactionRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTransaction not implemented")
}
func (UnimplementedDbProxyServer) mustEmbedUnimplementedDbProxyServer() {}

// UnsafeDbProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DbProxyServer will
// result in compilation errors.
type UnsafeDbProxyServer interface {
	mustEmbedUnimplementedDbProxyServer()
}

func RegisterDbProxyServer(s grpc.ServiceRegistrar, srv DbProxyServer) {
	s.RegisterService(&DbProxy_ServiceDesc, srv)
}

func _DbProxy_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbProxyServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.DbProxy/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbProxyServer).Query(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbProxy_QueryOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbProxyServer).QueryOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.DbProxy/QueryOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbProxyServer).QueryOne(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbProxy_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbProxyServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.DbProxy/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbProxyServer).Execute(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbProxy_ExecBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbProxyServer).ExecBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.DbProxy/ExecBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbProxyServer).ExecBatch(ctx, req.(*BatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbProxy_BeginTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbProxyServer).BeginTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.DbProxy/BeginTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbProxyServer).BeginTransaction(ctx, req.(*BeginTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbProxy_EndTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbProxyServer).EndTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/query.DbProxy/EndTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbProxyServer).EndTransaction(ctx, req.(*EndTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DbProxy_ServiceDesc is the grpc.ServiceDesc for DbProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DbProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "query.DbProxy",
	HandlerType: (*DbProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _DbProxy_Query_Handler,
		},
		{
			MethodName: "QueryOne",
			Handler:    _DbProxy_QueryOne_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _DbProxy_Execute_Handler,
		},
		{
			MethodName: "ExecBatch",
			Handler:    _DbProxy_ExecBatch_Handler,
		},
		{
			MethodName: "BeginTransaction",
			Handler:    _DbProxy_BeginTransaction_Handler,
		},
		{
			MethodName: "EndTransaction",
			Handler:    _DbProxy_EndTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_db_proxy.proto",
}
